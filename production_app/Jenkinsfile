pipeline {
    agent {label "slave1"}
    environment {
        TIME = sh(script: 'date "+%Y-%m-%d %H:%M:%S"', returnStdout: true).trim()
    }

    parameters {
        string(name: 'imagename', defaultValue: '', description: 'Name of the Docker image')
        string(name: 'imagetag', defaultValue: '', description: 'Image tag for Docker build')
    }

    stages {
        // stage('GitSCM') {
        //     steps {
        //         checkout([
        //         $class: 'GitSCM',
        //         //branches - can add more than 1 branch
        //         branches: [[name: 'main']],
        //         //add the usrl for the branch you want to coonect to, adding the ssh url or https???
        //         userRemoteConfigs: [[
        //             url: 'https://github.com/PokiBal/MyProject_1.git',
        //             credentialsId: ''
        //         ]]
        //     ])
        //     }
        // }
        stage('Clone') {
            steps {
                dir('/home/ubuntu/workspace/build and test pipeline/') {
                    sh 'rm -rf *'
                    sh 'git clone https://github.com/PokiBal/MyProject_1.git'
                }
            }
        }
        stage('Build DockerImage'){
            steps{
                echo "build image"
                dir('/home/ubuntu/workspace/build and test pipeline/MyProject_1/production_app'){
                sh "docker build -t ${params.imagename}:${params.imagetag} ."
                }
            }
        }
        stage('Run Container'){
            steps{
                sh "docker run -it --name my-flask -p 5000:5000 -d ${params.imagename}:${params.imagetag}"
                }
        }
        stage("build user") {
            steps{
                wrap([$class: 'BuildUser', useGitAuthor: true]) {
                    sh "export USERNAME=${BUILD_USER}"
                }
            }
        }

        stage('Test') {
            steps {
                echo "test"
                dir('/home/ubuntu/workspace/build and test pipeline/MyProject_1/production_app'){
                sh 'pytest tests.py::Test_class --html=test_report.html'
                }
            }
        }

        stage ('upload to s3 bucket'){
            steps{
            dir('/home/ubuntu/workspace/build and test pipeline/MyProject_1/production_app') {
                withAWS(credentials: 'awscredentials'){
                     sh 'aws s3 cp test_report.html s3://project1-results'
                }
                }
            }
        }

        stage('UploadToS3Bucket') {
            steps {
                    withAWS(region: "us-east-1", credentials: "${awscredentils}"){
                        s3Upload(file:"test_report.html", bucket:"project1-results", path:"/home/ubuntu/workspace/build and test pipeline/MyProject_1/production_app")
                    }
                }
        }

        stage('UploadToDunamoDB') {
            steps {
                echo "UploadToDynamo"
            }
        }
        stage('UploadToDockerHub') {
            steps {
                echo "UploadToDockerHUb"
            }
        }
    }
}
