pipeline {
    agent { label "build-test-slave-2" }

    environment {
        TIME = sh(script: 'date "+%Y-%m-%d %H:%M:%S"', returnStdout: true).trim()
    }

    parameters {
        string(name: 'imagename', defaultValue: '', description: 'Name of the Docker image')
    }

    stages {
        stage('Clone') {
            steps {
                dir('/home/ubuntu/workspace/build and test pipeline/') {
                    sh 'rm -rf *'
                    sh 'git clone https://github.com/PokiBal/MyProject_1.git'
                }
            }
        }
        stage('Build DockerImage') {
            steps {
                echo "Build image"
                dir('/home/ubuntu/workspace/build and test pipeline/MyProject_1/production_app') {
                    sh "docker build -t ${params.imagename}:1.0.$BUILD_NUMBER ."
                }
            }
        }
        stage('Run Container') {
            steps {
                sh 'echo 1.0.$BUILD_NUMBER'
                sh "docker run -it --name flask-app -p 5000:5000 -d ${params.imagename}:1.0.$BUILD_NUMBER"
            }
        }
        stage("build user") {
            steps {
                script {
                    env.BUILD_USER = 'Inbal Rozenfeld'
                }
                echo 'BUILD_USER: ' + env.BUILD_USER
            }
        }
        stage('test application') {
            steps {
                echo "Test"
                dir('/home/ubuntu/workspace/build and test pipeline/MyProject_1/production_app') {
                    sh 'pytest tests.py::Test_class::test_signup --html=test_report.html'
                }
            }
            post {
                always {
                    dir('/home/ubuntu/workspace/build and test pipeline/MyProject_1/production_app') {
                    script {
                        echo "Test post"
                        sh 'cat test_report.html'
                        sh 'grep -q "FAIL" test_report.html || echo "PASS" > test_status.txt'
                        def testStatus = readFile('test_status.txt').trim()

                        if (testStatus == "FAIL") {
                            error("The tests failed, Aborting the pipeline.")
                            }
                        }
                    }
                 }   
            }
        }
        stage('Upload to S3 bucket') {
            steps {
                withAWS(credentials: 'AWScredentials') {
                    sh '/root/.local/bin/aws s3 cp "/home/ubuntu/workspace/build and test pipeline/MyProject_1/production_app/test_report.html" "s3://project1-results"'
                }
            }
        }
        stage('Upload to DynamoDB') {
            steps {
                dir('/home/ubuntu/workspace/build and test pipeline/MyProject_1/production_app') {
                    script {
                        def log_entry = sh(script: 'python3.8 logfile.py', returnStdout: true).trim()
                        def (timestamp, message) = log_entry.split(',')
                        message = message.replaceAll('"', '\\"') // add this line to escape quotation marks
                        withAWS(credentials: 'AWScredentials', region: 'us-west-2') {
                            sh "/root/.local/bin/aws dynamodb put-item --table-name project_build_report --item \"{\\\"user\\\": {\\\"S\\\": \\\"${env.BUILD_USER}\\\"}, \\\"date\\\": {\\\"S\\\": \\\"${timestamp}\\\"}, \\\"result\\\": {\\\"S\\\": \\\"${message}\\\"}}\""
                        }
                    }
                }
            }
        }
        stage('UploadImageToDockerHub') {
            steps {
                script {
                    def dockerImageName = "${params.imagename}:1.0.$BUILD_NUMBER"
                    withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_PASSWORD"
                        echo "Login"
                        def dockerHubImageName = "puki121/project:1.0.$BUILD_NUMBER"
                        sh "docker tag ${dockerImageName} ${dockerHubImageName}"
                        sh "docker push ${dockerHubImageName}"
                        build job: 'deployment', parameters: [
                            string(name: 'imagename', value: dockerImageName),
                            string(name: 'imagetag', value: BUILD_NUMBER)
                        ]
                    }
                }
            }
        }
    }
}
